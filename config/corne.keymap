#define COMBO_TIMEOUT 200
#define MACRO_TAP 10
#define MACRO_WAIT 0
#define P_Q 1
#define P_W 2
#define P_E 3
#define P_R 4
#define P_T 5
#define P_Y 6
#define P_U 7
#define P_I 8
#define P_O 9
#define P_P 10
#define P_A 13
#define P_S 14
#define P_D 15
#define P_F 16
#define P_G 17
#define P_H 18
#define P_J 19
#define P_K 20
#define P_L 21
#define P_SEMI 22
#define P_SQT 23
#define P_Z 25
#define P_X 26
#define P_C 27
#define P_V 28
#define P_B 29
#define P_N 30
#define P_M 31
#define P_COMA 32
#define P_DOT 33
#define P_COMBO 38 39

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        shift_caps_word_dance: shift_caps_word_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORD_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 3 TAB               &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y       &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL               &kp A  &kp S  &kp D     &kp F  &kp G        &kp H       &kp J  &kp K      &kp L    &kp SEMI  &lt 4 SQT
&shift_caps_word_dance  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N       &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                      &kp LGUI  &mo 1  &kp SPACE    &kp RETURN  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB                 &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0     &kp BACKSPACE
&bt BT_CLR              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &kp PG_UP  &kp HOME
&shift_caps_word_dance  &trans        &trans        &trans        &trans        &key_repeat     &trans    &trans    &trans    &trans     &kp PG_DN  &kp END
                                                    &kp LGUI      &trans        &trans          &trans    &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB                 &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL               &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&shift_caps_word_dance  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                                          &kp LGUI  &trans    &trans       &trans     &trans     &kp RALT
            >;
        };

        f_keys {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
&trans  &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOLUME_UP      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans            &trans      &kp C_MUTE           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans            &trans      &kp C_VOLUME_DOWN    &trans  &trans  &trans  &trans  &trans  &trans
                            &trans            &trans      &trans               &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        // MACROS START
        // MACROS END
    };

    combos {
        compatible = "zmk,combos";

        // COMBOS START
        // COMBOS END

        colon {
            bindings = <&kp COLON>;
            key-positions = <22 21>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 31>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <18 19>;
        };

        input_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <25 26>;
        };

        eq {
            bindings = <&kp KP_EQUAL>;
            key-positions = <19 20>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <31 32>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <22 23>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <34 35>;
        };

        lhs {
            bindings = <&kp BACKSLASH>;
            key-positions = <10 9>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };
};
